openapi: 3.0.3
info:
  version: "latest"
  title: Example - API
  description: |
    XYXYXY
security:
  - BearerAuth: []

paths:
  ## Health resources
  "/ping":
    get:
      tags:
        - Health
      summary: ping.
      operationId: ping
      responses:
        "200":
          description: pong.
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Security resources
  "/signin":
    post:
      tags:
        - Security
      summary: Login user.
      operationId: signIn
      requestBody:
        description: Login payload. set 'user_id' to null when authenticating with email and password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationPayload"
      responses:
        "201":
          description: Logged in payload.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/signup":
    post:
      tags:
        - Security
      summary: Sign up user
      operationId: signUp
      requestBody:
        description: Sign up payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUp"
      responses:
        "201":
          description: Signed up user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/whoami":
    get:
      tags:
        - Security
      summary: Tells you who you are.
      operationId: whoami
      responses:
        "200":
          description: Who you are.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Chating resources
  "/users/{id}/chat":
    get:
      tags:
        - Chatbot
      summary: Obtain information from the chatbot.
      operationId: getChatbotInformation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: prompt
          in: query
          required: true
          description: The question to ask the chatbot about.
          schema:
            type: string
      responses:
        "200":
          description: The response given by the chatbot.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatResponse"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Users resources
  "/users":
    get:
      tags:
        - User
      summary: Get all users.
      operationId: getUsers
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: name
          in: query
          required: false
          description: Filter user by first name or lastname or username.
          schema:
            type: string
      responses:
        "200":
          description: List of users that meet the criterias.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/users/{id}":
    get:
      tags:
        - User
      summary: Get user by identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getUserById
      responses:
        "200":
          description: The identified user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - User
      summary: Crupdate user by identifier.
      operationId: crupdateUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User to crupdate.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: The crupdated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  "/users/{uid}/pictures":
    put:
      tags:
        - User
      summary: Submit user picture of the type profile banner or profile picture
      operationId: putUserPicture
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/UserPictureType"
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: User picture added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPicture'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    get:
      tags:
        - User
      summary: Get user picture of the type profile banner or profile picture
      operationId: getUserPicture
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/UserPictureType"

      responses:
        '200':
          description: User picture fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPicture'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  ## Xxxxxxing resources
  "/xxxxxxs":
    get:
      tags:
        - Xxxxxxing
      summary: Get all xxxxxxs.
      operationId: getXxxxxxs
      parameters:
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of xxxxxxs that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Xxxxxx"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/xxxxxxs/{pid}":
    get:
      tags:
        - Xxxxxxing
      summary: Get xxxxxx by identifier.
      operationId: getXxxxxxById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The identified xxxxxx.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Xxxxxx"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Xxxxxxing
      summary: Crupdate xxxxxx by identifier.
      operationId: crupdateXxxxxxById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Xxxxxx to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Xxxxxx"
      responses:
        "201":
          description: The crupdated xxxxxx.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Xxxxxx"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Xxxxxxing
      summary: Delete xxxxxx by identifier.
      operationId: deleteXxxxxxById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The deleted xxxxxx.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Xxxxxx"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/users/{uid}/xxxxxxs/{xid}/react":
    put:
      tags:
        - Xxxxxxing
      summary: Reacte an xxxxxxs.
      operationId: crupdateReactionXxxxxxs
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: xid
          in: path
          required: true
          schema:
            type: string
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      requestBody:
        description: Reaction to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "200":
          description: List of xxxxxxs that meet the criteria.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/xxxxxxs/{xid}/react":
    get:
      tags:
        - Xxxxxxing
      summary: Get all ReactionXxxxxxs.
      operationId: getReactionXxxxxxs
      parameters:
        - name: xid
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: query
          required: false
          schema:
            type: string
        - name: have_like_reaction
          in: query
          required: false
          schema:
            type: boolean
        - name: have_vision
          in: query
          required: false
          schema:
            type: boolean
        - name: have_stars_number
          in: query
          required: false
          schema:
            type: boolean
        - name: have_comment
          in: query
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        "200":
          description: List of xxxxxxs that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Yyyyyying resources
  "/yyyyyys":
    get:
      tags:
        - Yyyyyying
      summary: Get all yyyyyys.
      operationId: getYyyyyys
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: categories
          in: query
          required: false
          description: yyyyyy
          schema:
            type: string
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of yyyyyys that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Yyyyyy"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/yyyyyys/{pid}":
    get:
      tags:
        - Yyyyyying
      summary: Get yyyyyy by identifier.
      operationId: getYyyyyyById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The identified yyyyyy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Yyyyyy"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Yyyyyying
      summary: Crupdate yyyyyy by identifier.
      operationId: crupdateYyyyyyById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Yyyyyy to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Yyyyyy"
      responses:
        "201":
          description: The crupdated yyyyyy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Yyyyyy"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Yyyyyying
      summary: Delete yyyyyy by identifier.
      operationId: deleteYyyyyyById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The deleted yyyyyy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Yyyyyy"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"


  "/Users/{id}/yyyyyy/{yyyyyy_id}/pdf":
    get:
      tags:
        - Yyyyyying
      summary: Get pdf of a specific yyyyyy.
      operationId: getYyyyyyPdf
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: yyyyyy_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Yyyyyy Pdf
          content:
            application/pdf:
              schema:
                type: string
                format: binary
                example: PDF VERSION

        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  "/users/{uid}/yyyyyys/{xid}/react":
    put:
      tags:
        - Yyyyyying
      summary: Reacte an yyyyyys.
      operationId: crupdateReactionYyyyyys
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: xid
          in: path
          required: true
          schema:
            type: string
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      requestBody:
        description: Reaction to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "200":
          description: List of yyyyyys that meet the criteria.
          content:
            apeyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0K3Zhbm9AaGVpLnNjaG9vbCIsImlhdCI6MTcyMjg5NTY3MCwiZXhwIjoxNzIzNDk1NjcwfQ.va9FHIb7juP5Qzg9PfvxHc4cvvEWKsmDQN9QexBT30Mplication/json:
              schema:
                $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
  "/yyyyyys/{xid}/react":
    get:
      tags:
        - Yyyyyying
      summary: Get all ReactionYyyyyys.
      operationId: getReactionYyyyyys
      parameters:
        - name: xid
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: query
          required: false
          schema:
            type: string
        - name: have_like_reaction
          in: query
          required: false
          schema:
            type: boolean
        - name: have_vision
          in: query
          required: false
          schema:
            type: boolean
        - name: have_stars_number
          in: query
          required: false
          schema:
            type: boolean
        - name: have_comment
          in: query
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        "200":
          description: List of yyyyyys that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Zzzzzzing resources
  "/zzzzzzs":
    get:
      tags:
        - Zzzzzzing
      summary: Get all zzzzzzs.
      operationId: getZzzzzzs
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of zzzzzzs that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Zzzzzz"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/zzzzzzs/{pid}":
    get:
      tags:
        - Zzzzzzing
      summary: Get zzzzzz by identifier.
      operationId: getZzzzzzById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The identified zzzzzz.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Zzzzzz"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Zzzzzzing
      summary: Crupdate zzzzzz by identifier.
      operationId: crupdateZzzzzzById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Zzzzzz to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zzzzzz"
      responses:
        "201":
          description: The crupdated zzzzzz.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Zzzzzz"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Zzzzzzing
      summary: Delete zzzzzz by identifier.
      operationId: deleteZzzzzzById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The deleted zzzzzz.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Zzzzzz"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
  "/users/{uid}/zzzzzzs/{xid}/react":
    put:
      tags:
        - Zzzzzzing
      summary: Reacte an zzzzzzs.
      operationId: crupdateReactionZzzzzzs
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: xid
          in: path
          required: true
          schema:
            type: string
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      requestBody:
        description: Reaction to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "200":
          description: List of zzzzzzs that meet the criteria.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/zzzzzzs/{xid}/react":
    get:
      tags:
        - Zzzzzzing
      summary: Get all ReactionZzzzzzs.
      operationId: getReactionZzzzzzs
      parameters:
        - name: xid
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: query
          required: false
          schema:
            type: string
        - name: have_like_reaction
          in: query
          required: false
          schema:
            type: boolean
        - name: have_vision
          in: query
          required: false
          schema:
            type: boolean
        - name: have_stars_number
          in: query
          required: false
          schema:
            type: boolean
        - name: have_comment
          in: query
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        "200":
          description: List of zzzzzzs that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    ## response model
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestException"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotAuthorizedException"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceNotFoundException"
    "429":
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TooManyRequestsException"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerException"

  schemas:
    ## enum type
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Role:
      type: string
      enum:
        - CLIENT
        - MANAGER
    Sex:
      type: string
      enum:
        - M
        - F
        - OTHER
    ReactionType:
      type: string
      enum:
        - LIKE
        - DISLIKE
    UserStatus:
      type: string
      enum:
        - ENABLED
        - BANISHED

        ## resource model

    Xxxxxx:
      properties:
        id:
          type: string
        creation_datetime:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"


    Yyyyyy:
      properties:
        id:
          type: string
        creation_datetime:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        xxxxxx:
          $ref: "#/components/schemas/Xxxxxx"
        zzzzzz:
          $ref: "#/components/schemas/Zzzzzz"

    Zzzzzz:
      properties:
        id:
          type: string
        creation_datetime:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ChatResponse:
      properties:
        creation_datetime:
          type: string
          format: date-time
        response:
          type: string

    Reaction:
      properties:
        id:
          type: string
        likeReaction:
          $ref: "#/components/schemas/ReactionType"
        creation_datetime:
          type: string
          format: date-time
        last_update_datetime:
          type: string
          format: date-time
        user_id:
          type: string
        subject_id:
          type: string
        vision:
          type: boolean
        StarsNumber:
          type: integer
        comment:
          type: string
    CreateUser:
      properties:
        id:
          type: string
        last_name:
          type: string
        first_name:
          type: string
        birth_date:
          type: string
          format: date
        email:
          type: string
        username:
          type: string
        status:
          $ref: "#/components/schemas/UserStatus"
        sex:
          $ref: "#/components/schemas/Sex"
        role:
          $ref: "#/components/schemas/Role"
    User:
      allOf:
        - $ref: "#/components/schemas/CreateUser"
      properties:
        photo_url:
          type: string
        profile_banner_url:
          type: string
        entrance_datetime:
          type: string
          format: date-time
    UserPicture:
      properties:
        user_id:
          type: string
        type:
          $ref: "#/components/schemas/UserPictureType"
        url:
          type: string
    UserPictureType:
        type: string
        enum:
         - BANNER
         - PROFILE
    AuthenticationPayload:
      properties:
        email:
          type: string
        password:
          type: string
    SignUp:
      allOf:
        - $ref: "#/components/schemas/CreateUser"
        - $ref: "#/components/schemas/AuthenticationPayload"
      properties:
        password:
          type: string
    Whoami:
      properties:
        user:
          $ref: "#/components/schemas/User"
        bearer:
          type: string

    ## exception model
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: InternalServerException
        message: Unexpected error
