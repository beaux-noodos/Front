openapi: 3.0.3
info:
  version: "latest"
  title: Prehakaton - API
  description: |
    XYXYXY
security:
  - BearerAuth: []

paths:
  ## Health resources
  "/ping":
    get:
      tags:
        - Health
      summary: ping.
      operationId: ping
      responses:
        "200":
          description: pong.
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Security resources
  "/signin":
    post:
      tags:
        - Security
      summary: Login user.
      operationId: signIn
      requestBody:
        description: Login payload. set 'user_id' to null when authenticating with email and password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationPayload"
      responses:
        "201":
          description: Logged in payload.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/signup":
    post:
      tags:
        - Security
      summary: Sign up user
      operationId: signUp
      requestBody:
        description: Sign up payload.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUp"
      responses:
        "201":
          description: Signed up user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/whoami":
    get:
      tags:
        - Security
      summary: Tells you who you are.
      operationId: whoami
      responses:
        "200":
          description: Who you are.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Chating resources
  "/users/{id}/chat":
    get:
      tags:
        - Chatbot
      summary: Obtain information from the chatbot.
      operationId: getChatbotInformation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: prompt
          in: query
          required: true
          description: The question to ask the chatbot about.
          schema:
            type: string
      responses:
        "200":
          description: The response given by the chatbot.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatResponse"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/users/{id}/technical-solution/{tsid}/chat":
    get:
      tags:
        - Chatbot
      summary: Obtain information from the chatbot.
      operationId: getChatbotTechnicalInformation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: tsid
          in: path
          required: true
          schema:
            type: string
        - name: prompt
          in: query
          required: true
          description: The question to ask the chatbot about.
          schema:
            type: string
      responses:
        "200":
          description: The response given by the chatbot.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatResponse"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/technical-solution/{tsid}/prompt":
    put:
      tags:
        - Chatbot
      summary: Add information from in chatbot.
      operationId: putChatbotTechnicalInformation
      parameters:
        - name: tsid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User to crupdate.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prompt"
      responses:
        "200":
          description: Prompt modify.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Prompt"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Users resources
  "/users":
    get:
      tags:
        - User
      summary: Get all users.
      operationId: getUsers
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: name
          in: query
          required: false
          description: Filter user by first name or lastname or username.
          schema:
            type: string
      responses:
        "200":
          description: List of users that meet the criterias.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/users/{id}":
    get:
      tags:
        - User
      summary: Get user by identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getUserById
      responses:
        "200":
          description: The identified user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - User
      summary: Crupdate user by identifier.
      operationId: crupdateUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User to crupdate.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: The crupdated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  "/users/{uid}/pictures":
    put:
      tags:
        - User
      summary: Submit user picture of the type profile banner or profile picture
      operationId: putUserPicture
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/UserPictureType"
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: User picture added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPicture'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

    get:
      tags:
        - User
      summary: Get user picture of the type profile banner or profile picture
      operationId: getUserPicture
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/UserPictureType"

      responses:
        '200':
          description: User picture fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPicture'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'


  "/users/{id}/projects/{pid}/subscribe":
    get:
      summary: "Récupérer les cours suivis par l'utilisateur"
      operationId: "getUserSubscribedProjects"
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "ID de l'utilisateur"
        - in: path
          name: pid
          required: true
          schema:
            type: string
          description: "ID de l'projects"
      responses:
        '200':
          description: "Liste des cours suivis"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          $ref: "#/components/responses/400"
        '403':
          $ref: "#/components/responses/403"
        '404':
          $ref: "#/components/responses/404"
        '429':
          $ref: "#/components/responses/429"
        '500':
          $ref: "#/components/responses/500"

  "/users/{id}/notification":
    get:
      summary: "Récupérer les notifications de l'utilisateur"
      operationId: "getUserNotifications"
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "ID de l'utilisateur"
      responses:
        '200':
          description: "Liste des notifications"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '400':
          $ref: "#/components/responses/400"
        '403':
          $ref: "#/components/responses/403"
        '404':
          $ref: "#/components/responses/404"
        '429':
          $ref: "#/components/responses/429"
        '500':
          $ref: "#/components/responses/500"

  ## Projecting resources
  "/projects":
    get:
      tags:
        - Projecting
      summary: Get all projects.
      operationId: getProjects
      parameters:
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of projects that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/projects/{pid}":
    get:
      tags:
        - Projecting
      summary: Get project by identifier.
      operationId: getProjectById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The identified project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Projecting
      summary: Crupdate project by identifier.
      operationId: crupdateProjectById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Project to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: The crupdated project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/users/{uid}/projects/{xid}/react":
    put:
      tags:
        - Projecting
      summary: Reacte an projects.
      operationId: crupdateReactionProjects
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: xid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Reaction to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "200":
          description: List of projects that meet the criteria.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/projects/{xid}/react":
    get:
      tags:
        - Projecting
      summary: Get all ReactionProjects.
      operationId: getReactionProjects
      parameters:
        - name: xid
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: query
          required: false
          schema:
            type: string
        - name: have_like_reaction
          in: query
          required: false
          schema:
            type: boolean
        - name: have_vision
          in: query
          required: false
          schema:
            type: boolean
        - name: have_stars_number
          in: query
          required: false
          schema:
            type: boolean
        - name: have_comment
          in: query
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        "200":
          description: List of projects that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/projects/{xid}/pictures":
    put:
      tags:
        - Projecting
      summary: Submit project picture
      operationId: putProjectPicture
      parameters:
        - name: xid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Project with picture added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  ## ProjectSessioning resources
  "/users/{id}/project-sessions":
    get:
      tags:
        - ProjectSessioning
      summary: Get all projectSessions.
      operationId: getUserProjectSessions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "ID de l'utilisateur"
        - name: page
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PageSize"
      responses:
        "200":
          description: List of projectSessions that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectSession"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/projects/{xid}/project-sessions":
    get:
      tags:
        - ProjectSessioning
      summary: Get all projectSessions.
      operationId: getProjectSessions
      parameters:
        - in: path
          name: xid
          required: true
          schema:
            type: string
          description: "ID du cours"
        - name: page
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of projectSessions that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectSession"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/projects/{xid}/project-sessions/{pid}":
    get:
      tags:
        - ProjectSessioning
      summary: Get projectSession by identifier.
      operationId: getProjectSessionById
      parameters:
        - in: path
          name: xid
          required: true
          schema:
            type: string
          description: "ID du cours"
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The identified projectSession.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectSession"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - ProjectSessioning
      summary: Crupdate projectSession by identifier.
      operationId: crupdateProjectSessionById
      parameters:
        - in: path
          name: xid
          required: true
          schema:
            type: string
          description: "ID du cours"
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ProjectSession to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectSession"
      responses:
        "201":
          description: The crupdated projectSession.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectSession"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  ## Locationing resources
  "/locations":
    get:
      tags:
        - Locationing
      summary: Get all locations.
      operationId: getLocations
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Page"
        - name: page_size
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: isSuggest
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of locations that meet the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

  "/locations/{pid}":
    get:
      tags:
        - Locationing
      summary: Get location by identifier.
      operationId: getLocationById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The identified location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Locationing
      summary: Crupdate location by identifier.
      operationId: crupdateLocationById
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Location to crupdate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: The crupdated location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        "500":
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    ## response model
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestException"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotAuthorizedException"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceNotFoundException"
    "429":
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TooManyRequestsException"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerException"

  schemas:
    ## enum type
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Role:
      type: string
      enum:
        - TECHNICAL_SOLUTION
        - PROJECT_OWNER
        - INVESTOR
        - MANAGER
    Sex:
      type: string
      enum:
        - M
        - F
        - OTHER
    ReactionType:
      type: string
      enum:
        - LIKE
        - DISLIKE
    UserStatus:
      type: string
      enum:
        - ENABLED
        - BANISHED

    StatusEnum:
      type: string
      enum:
        - PLANNING
        - CONFIRMED
        - COMPLETED

    StatusSessionEnum:
      type: string
      enum:
        - NOT_STARTING
        - IN_PROGRESS
        - COMPLETED

        ## resource model

    HaveCreationAndUpdate:
      properties:
        creation_datetime:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ReactionsProperties:
      properties:
        like_number:
          type: integer
        view_number:
          type: integer
        star_medium:
          type: number
          format: float

    HaveImageProperties:
      properties:
        image_url:
          type: string
        picture_is_implemented:
          type: boolean

    Project:
      allOf:
        - $ref: "#/components/schemas/ReactionsProperties"
        - $ref: "#/components/schemas/HaveImageProperties"
        - $ref: "#/components/schemas/HaveCreationAndUpdate"
      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/User"
        title:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            $ref: "#/components/schemas/ProjectCategory"
        investor:
          $ref: "#/components/schemas/User"
        technicalSolution:
          $ref: "#/components/schemas/User"
        sessions:
          type: array
          items:
            $ref: "#/components/schemas/ProjectSession"
        status:
          $ref: "#/components/schemas/StatusEnum"
        price:
          type: number
          format: float
        localisation:
          $ref: "#/components/schemas/Location"
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        need_investor:
          type: boolean
        need_technical_solution:
          type: boolean

    Notification:
      allOf:
        - $ref: "#/components/schemas/HaveCreationAndUpdate"

      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/User"
        title:
          type: string
        body:
          type: string
        isRead:
          type: boolean

    ProjectSession:
      allOf:
        - $ref: "#/components/schemas/ReactionsProperties"
        - $ref: "#/components/schemas/HaveCreationAndUpdate"
      properties:
        id:
          type: string
        project:
          $ref: "#/components/schemas/Project"
        location:
          $ref: "#/components/schemas/Location"
        status:
          $ref: "#/components/schemas/StatusSessionEnum"
        title:
          type: string
        description:
          type: string
        end_datetime:
          type: string
          format: date-time


    Location:
      allOf:
        - $ref: "#/components/schemas/HaveCreationAndUpdate"
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        latitude:
          type: string
        longitude:
          type: string

    Prompt:
      allOf:
        - $ref: "#/components/schemas/HaveCreationAndUpdate"
      properties:
        id:
          type: string
        prompt_category:
          type: string
        body:
          type: string


    ChatResponse:
      allOf:
        - $ref: "#/components/schemas/HaveCreationAndUpdate"
      properties:
        id:
          type: string
        prompts:
          type: array
          items:
            $ref: "#/components/schemas/Prompt"

    ChatModel:
      properties:
        creation_datetime:
          type: string
          format: date-time
        response:
          type: string

    Reaction:
      allOf:
        - $ref: "#/components/schemas/HaveCreationAndUpdate"
      properties:
        id:
          type: string
        likeReaction:
          $ref: "#/components/schemas/ReactionType"
        user_id:
          type: string
        subject_id:
          type: string
        vision:
          type: boolean
        StarsNumber:
          type: integer
        comment:
          type: string
    CreateUser:
      properties:
        id:
          type: string
        last_name:
          type: string
        first_name:
          type: string
        birth_date:
          type: string
          format: date
        email:
          type: string
        username:
          type: string
        status:
          $ref: "#/components/schemas/UserStatus"
        sex:
          $ref: "#/components/schemas/Sex"
        role:
          $ref: "#/components/schemas/Role"
    User:
      allOf:
        - $ref: "#/components/schemas/CreateUser"
      properties:
        photo_url:
          type: string
        profile_banner_url:
          type: string
        entrance_datetime:
          type: string
          format: date-time
    UserPicture:
      properties:
        user_id:
          type: string
        type:
          $ref: "#/components/schemas/UserPictureType"
        url:
          type: string
    UserPictureType:
      type: string
      enum:
        - BANNER
        - PROFILE
    AuthenticationPayload:
      properties:
        email:
          type: string
        password:
          type: string
    SignUp:
      allOf:
        - $ref: "#/components/schemas/CreateUser"
        - $ref: "#/components/schemas/AuthenticationPayload"
      properties:
        password:
          type: string
    Whoami:
      properties:
        user:
          $ref: "#/components/schemas/User"
        bearer:
          type: string

    Signalisation:
      allOf:
        - $ref: "#/components/schemas/HaveCreationAndUpdate"
      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/User"
        reason:
          type: string
          description: "Raison de la signalisation"
        details:
          type: string
          description: "Détails supplémentaires concernant la signalisation"

    ProjectCategory:
      type: object
      properties:
        name:
          type: string
          description: "Nom de la categorie"
        description:
          type: string
          description: "Détails supplémentaires concernant la categorie"

    ## exception model
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: "#/components/schemas/Exception"
      example:
        type: InternalServerException
        message: Unexpected error